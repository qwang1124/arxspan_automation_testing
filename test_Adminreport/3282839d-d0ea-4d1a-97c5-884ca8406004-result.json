{"name": "test1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotVisibleException: Message: element not interactable\n  (Session info: chrome=72.0.3626.119)\n  (Driver info: chromedriver=2.46.628411 (3324f4c8be9ff2f70a05a30ebc72ffb013e1a71e),platform=Mac OS X 10.14.3 x86_64)", "trace": "self = <test01_notebook_all_admin.TestCreatenotebookAdmin testMethod=test1>\n\n    @allure.testcase('test create notebook by Admin')\n    def test1(self):\n        driver = adminlogin()\n        # create notebook by admin\n        driver.find_element_by_id('createNewNotebookLeftNavButton').click()\n        driver.find_element_by_id('notebookName').send_keys('Test_Note_book_QW')\n        driver.find_element_by_name('notebookDescription').send_keys('Test Script execution-01/01/2019')\n        driver.find_element_by_name('createNotebook').click()\n    \n        test_value = driver.find_element_by_id('NotebookTitle').text\n        print(test_value)\n        a = 'Test_Note_book_QW'\n        test_value2 = driver.find_element_by_id('notebookOwnerSpan').text\n        b = 'System Administrator'\n        test_value3 = driver.find_element_by_id('notebookDescription').text\n        print(test_value2)\n        c = 'Test Script execution-01/01/2019'\n    \n        if a in test_value and b in test_value2 and c in test_value3:\n            valid = True\n        else:\n            valid = False\n            picture_name = 'testcreateNotebookAdmin_' + str(time.strftime('%Y%m%d%H%M%S')) + ' .png'\n            driver.get_screenshot_as_file(picture_name)\n        self.assertTrue(valid)\n    \n        # Share notebook with Joe Chemistry\n        driver.find_element_by_id('shareNotebookLink').click()\n>       driver.find_element_by_class_name('groupSelectLink').click()\n\ntestcases/ELN_test/test01_notebook_all_admin.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107623550>\nresponse = {'sessionId': 'bb458af6e974df09a5478bbb7a7852a4', 'status': 11, 'value': {'message': 'element not interactable\\n  (Ses... (Driver info: chromedriver=2.46.628411 (3324f4c8be9ff2f70a05a30ebc72ffb013e1a71e),platform=Mac OS X 10.14.3 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotVisibleException: Message: element not interactable\nE         (Session info: chrome=72.0.3626.119)\nE         (Driver info: chromedriver=2.46.628411 (3324f4c8be9ff2f70a05a30ebc72ffb013e1a71e),platform=Mac OS X 10.14.3 x86_64)\n\n/usr/local/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementNotVisibleException"}, "attachments": [{"name": "log", "source": "e6d2f639-99f2-4600-a082-0de915b2bf40-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "488e9b45-6e47-4dd7-ba9b-2cb4e6900415-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "bbdceb28-7e81-49c3-81d4-54ebbbae8e8b-attachment.txt", "type": "text/plain"}], "start": 1551567543770, "stop": 1551567650452, "uuid": "d77128ae-0a45-4bbc-a747-ecd9b6c901fa", "historyId": "af7d26bf2c398db454432285ab38d109", "fullName": "testcases.ELN_test.test01_notebook_all_admin.TestCreatenotebookAdmin#test1", "labels": [{"name": "parentSuite", "value": "testcases.ELN_test"}, {"name": "suite", "value": "test01_notebook_all_admin"}, {"name": "subSuite", "value": "TestCreatenotebookAdmin"}, {"name": "host", "value": "Stephens-Mac-mini.local"}, {"name": "thread", "value": "26396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.ELN_test.test01_notebook_all_admin"}], "links": [{"type": "test_case", "url": "test create notebook by Admin"}]}