{"name": "test1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"id\",\"selector\":\"historyNavLink\"}\n  (Session info: chrome=71.0.3578.98)\n  (Driver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)", "trace": "self = <test04_chemistryexperiment_all_joe.TestCreateexperimentJoe testMethod=test1>\n\n    @allure.testcase('createexperiment')\n    def test1(self):\n        driver = testjoelogin()\n        time.sleep(1)\n        # Create new chemistry experiment\n        driver.find_element_by_xpath('//*[@id=\"navMyNotebooks\"]/ul/li/a').click()\n        driver.find_element_by_css_selector('#pageContentTD > div > div.createExperimentDiv > a:nth-child(2)').click()\n        time.sleep(2)\n        assert driver.find_element_by_id('historyNavLink').is_displayed()\n        time.sleep(2)\n        # add a new note to the experiment\n        driver.find_element_by_id('addNoteButton').click()\n        time.sleep(1)\n        text = driver.find_element_by_id('cke_250_contents')\n        driver.execute_script(\"arguments[0].innerHTML='<p>this is test</p>'\", text)\n        time.sleep(1)\n        save = driver.find_element_by_xpath('//*[contains(@id, \"note_p\")]/div[4]/a[1]')\n        save.send_keys(Keys.ENTER)\n        time.sleep(4)\n        assert driver.find_element_by_id('historyNavLink').is_displayed()\n    \n        driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n        time.sleep(2)\n        # upload the reaction\n        driver.find_element_by_id('uploadReaction').click()\n        path = Path('resources//06 epoxide opening.cdx').absolute()\n        driver.find_element_by_id('rxnFile').send_keys(str(path))\n        time.sleep(2)\n        driver.find_element_by_xpath(\"//button[contains(@onclick, 'rxnFile')]\").click()\n        time.sleep(2)\n        assert driver.find_element_by_id('historyNavLink').is_displayed()\n    \n        driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n        time.sleep(2)\n        # Upload the \"nmrketalreduction21H.txt\" file\n        driver.find_element_by_id('addFileButton').click()\n        fileinput = driver.find_elements_by_css_selector('#fileInputContainer > div > input[type=\"file\"]')\n        driver.execute_script(\n            'arguments[0].style = \"\"; arguments[0].style.display = \"block\"; arguments[0].style.visibility = \"visible\";',\n            fileinput)\n        path = Path('resources\\\\nmrketalreduction21H.txt').absolute()\n        driver.find_element_by_css_selector('#fileInputContainer > div > input[type=\"file\"]') \\\n            .send_keys(str(path))\n        time.sleep(2)\n        button = driver.find_element_by_css_selector('#resumableBrowserHolder > '\n                                                     'section.bottomButtons.buttonAlignedRight > button')\n        button.click()\n        time.sleep(6)\n        # assert driver.find_element_by_id('historyNavLink').is_displayed()\n        # driver.find_element_by_id('attachmentTable_tab').click()\n        # assert driver.find_element_by_id('attachmentTable').is_displayed\n        button = driver.find_element_by_css_selector('#submitRow > a:nth-child(1)')\n        button.send_keys(Keys.ENTER)\n        time.sleep(6)\n    \n    # @allure.testcase('signandkeepopen')\n    # def test5(self):\n    #     driver = testjoelogin()\n    #     time.sleep(2)\n    #     driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n    #     time.sleep(2)\n    #     save = driver.find_element_by_css_selector('#submitRow > a:nth-child(1)')\n    #     save.send_keys(Keys.ENTER)\n    #     time.sleep(2)\n    #     assert driver.find_element_by_id('historyNavLink').is_displayed()\n    #     driver.get('https://model.arxspan.com/arxlab/dashboard.asp')\n    #     time.sleep(2)\n    #     driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n    #     time.sleep(2)\n    #     driver.find_element_by_id('signExperimentButton').click()\n    #     email = driver.find_elements_by_id('signEmail')[0]\n    #     email.send_keys('joe@demo.com')\n    #     password = driver.find_elements_by_id('password')[0]\n    #     password.send_keys('carbonCopee')\n    #     select = Select(driver.find_element_by_id('signStatusBox'))\n    #     select.select_by_visible_text('Sign and Keep Open')\n    #     checkbox = driver.find_element_by_css_selector('#signDiv > form > section.bottomDisclaimer > div > label')\n    #     checkbox.click()\n    #     time.sleep(4)\n    #     driver.find_element_by_css_selector('#signDivButtons > button:nth-child(1)').click()\n    #     time.sleep(4)\n    #     driver.get('https://model.arxspan.com/arxlab/dashboard.asp')\n    #     time.sleep(2)\n    #     driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n    #     time.sleep(4)\n    #     assert driver.find_element_by_id('historyNavLink').is_displayed()\n    #     driver.close()\n    \n        driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n        time.sleep(2)\n        # add a new note to the experiment\n        driver.find_element_by_id('addNoteButton').click()\n        time.sleep(1)\n        text = driver.find_element_by_id('cke_250_contents')\n        driver.execute_script(\"arguments[0].innerHTML='<p>this is test</p>'\", text)\n        time.sleep(1)\n        save = driver.find_element_by_xpath('//*[contains(@id, \"note_p\")]/div[4]/a[1]')\n        save.send_keys(Keys.ENTER)\n        time.sleep(6)\n        # Sign & Close, selecting Jane Biologist as the Witness\n        driver.find_element_by_id('signExperimentButton').click()\n        email = driver.find_elements_by_id('signEmail')[0]\n        email.send_keys('joe@demo.com')\n        password = driver.find_elements_by_id('password')[0]\n        password.send_keys('carbonCopee')\n        select = Select(driver.find_element_by_id('requesteeIdBox'))\n        select.select_by_visible_text('Jane Biologist')\n        checkbox = driver.find_element_by_css_selector('#signDiv > form > section.bottomDisclaimer > div > label')\n        checkbox.click()\n        time.sleep(4)\n        driver.find_element_by_css_selector('#signDivButtons > button:nth-child(1)').click()\n        time.sleep(4)\n        driver.get('https://model.arxspan.com/arxlab/dashboard.asp')\n        time.sleep(2)\n        driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n        time.sleep(4)\n>       assert driver.find_element_by_id('historyNavLink').is_displayed()\n\ntestcases\\Eln_test\\test04_chemistryexperiment_all_joe.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:360: in find_element_by_id\n    return self.find_element(by=By.ID, value=id_)\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: in find_element\n    'value': value})['value']\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000295523295F8>\nresponse = {'sessionId': '243f54a0ba6756d5fac4b7d86d07f5f8', 'status': 7, 'value': {'message': 'no such element: Unable to locate...ver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"id\",\"selector\":\"historyNavLink\"}\nE         (Session info: chrome=71.0.3578.98)\nE         (Driver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)\n\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException"}, "attachments": [{"name": "log", "source": "6da4fcb9-ed94-4fd7-b46d-aabca66f13e3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "324e843c-8737-4da0-a47e-34b28a3d402b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "2fcc70c5-41e3-4512-8f4c-f6648707c889-attachment.txt", "type": "text/plain"}], "start": 1550068407969, "stop": 1550068501649, "uuid": "8832d8d9-a022-4cc8-8dbf-894c8596b135", "historyId": "e103c280949a16cf4e757e21ca5cc832", "fullName": "testcases.Eln_test.test04_chemistryexperiment_all_joe.TestCreateexperimentJoe#test1", "labels": [{"name": "parentSuite", "value": "testcases.Eln_test"}, {"name": "suite", "value": "test04_chemistryexperiment_all_joe"}, {"name": "subSuite", "value": "TestCreateexperimentJoe"}, {"name": "host", "value": "JEFF-LAPTOP-2015"}, {"name": "thread", "value": "13920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.Eln_test.test04_chemistryexperiment_all_joe"}], "links": [{"type": "test_case", "url": "createexperiment"}]}