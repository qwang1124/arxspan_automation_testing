{"name": "test1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\QingW\\Documents\\AAT\\arxspan_automation_testing\\resources\\PushTestingProtocolforELN.docx\n  (Session info: chrome=71.0.3578.98)\n  (Driver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)", "trace": "self = <test09_analyticalexperiment_all_joe.TestanalyticalexpernimentJoe testMethod=test1>\n\n    @allure.testcase('createanalyticalexperniment')\n    def test1(self):\n        driver = testjoelogin()\n        time.sleep(2)\n        # Select the recently note book\n        driver.find_element_by_xpath('//*[@id=\"navMyNotebooks\"]/ul/li/a').click()\n        time.sleep(1)\n        # Select to create a new analytical experiment\n        button = driver.find_element_by_css_selector('#pageContentTD > div > div.createExperimentDiv > a:nth-child(5)')\n        button.click()\n        time.sleep(2)\n        # Add a new note\n        text = driver.find_element_by_id('cke_17_contents')\n        driver.execute_script(\"arguments[0].innerHTML = 'TESTING TESTING'\", text)\n        save = driver.find_element_by_css_selector('#submitRow > a:nth-child(1)')\n        save.send_keys(Keys.ENTER)\n        time.sleep(6)\n        assert driver.find_element_by_id('historyNavLink').is_displayed()\n    \n        time.sleep(2)\n        driver.find_element_by_xpath('//*[@id=\"navMyExperiments\"]/ul/li[1]/a').click()\n        time.sleep(2)\n        # Add \"PushTestingProtocolforELN.docx\" file\n        driver.find_element_by_id('addFileButton').click()\n        fileinput = driver.find_elements_by_css_selector('#fileInputContainer > div > input[type=\"file\"]')\n        driver.execute_script(\n            'arguments[0].style = \"\"; arguments[0].style.display = \"block\"; arguments[0].style.visibility = \"visible\";',\n            fileinput)\n        path = Path('resources\\\\PushTestingProtocolforELN.docx').absolute()\n        driver.find_element_by_css_selector('#fileInputContainer > div > input[type=\"file\"]') \\\n>           .send_keys(str(path))\n\ntestcases\\ELN_test\\test09_analyticalexperiment_all_joe.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:479: in send_keys\n    'value': keys_to_typing(value)})\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EAD7965EF0>\nresponse = {'sessionId': 'a8d40ccc0ae697801cab97b02dcf32e7', 'status': 61, 'value': {'message': 'invalid argument: File not found...ver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\QingW\\Documents\\AAT\\arxspan_automation_testing\\resources\\PushTestingProtocolforELN.docx\nE         (Session info: chrome=71.0.3578.98)\nE         (Driver info: chromedriver=2.46.628402 (536cd7adbad73a3783fdc2cab92ab2ba7ec361e1),platform=Windows NT 10.0.17134 x86_64)\n\n..\\..\\..\\AppData\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "ba21eaa7-7633-4029-aa18-79fd7a2f3996-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2962db5b-5def-4a86-8d73-a3456e992600-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c148b1c9-bbd0-4847-978f-ec7b52ec1327-attachment.txt", "type": "text/plain"}], "start": 1550073223228, "stop": 1550073253592, "uuid": "79d8edb4-4e68-482c-b5aa-748a94ed9412", "historyId": "97828e886197dac538f4f8ccfacff970", "fullName": "testcases.ELN_test.test09_analyticalexperiment_all_joe.TestanalyticalexpernimentJoe#test1", "labels": [{"name": "parentSuite", "value": "testcases.ELN_test"}, {"name": "suite", "value": "test09_analyticalexperiment_all_joe"}, {"name": "subSuite", "value": "TestanalyticalexpernimentJoe"}, {"name": "host", "value": "JEFF-LAPTOP-2015"}, {"name": "thread", "value": "17900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.ELN_test.test09_analyticalexperiment_all_joe"}], "links": [{"type": "test_case", "url": "createanalyticalexperniment"}]}